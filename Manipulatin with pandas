import pandas as pd
import numpy as np

Series: satu kolom bagian dari tabel dataframe yang merupakan 1 dimensional numpy array sebagai basis datanya, terdiri dari 1 tipe data (integer, string, float, dll).
DataFrame: gabungan dari Series, berbentuk rectangular data yang merupakan tabel spreadsheet itu sendiri (karena dibentuk dari banyak Series, tiap Series biasanya punya
1 tipe data, yang artinya 1 dataframe bisa memiliki banyak tipe data).

# Series
number_list = pd.Series([1,2,3,4,5,6])
# DataFrame
matrix_list = pd.DataFrame([[1,2,3],
				                    ['a','b','c'],
				                    [3,4,5],
				                    ['d',4,6]])

.info() digunakan untuk mengecek kolom apa yang membentuk dataframe itu, data types, berapa yang non null, dll. 

.shape digunakan untuk mengetahui berapa baris dan kolom, hasilnya dalam format tuple (baris, kolom).

.dtypes digunakan untuk mengetahui tipe data di tiap kolom. Tipe data object: kombinasi untuk berbagai tipe data (number & text, etc).

.astype(nama_tipe_data) untuk convert tipe data berdasarkan tipe data seperti: float, int, str, numpy.float, numpy.int ataupun numpy.datetime.

.copy() digunakan melakukan duplikat, untuk disimpan di variable yang berbeda mungkin supaya tidak loading data lagi.

.to_list() digunakan untuk mengubah series menjadi list dan tidak dapat digunakan untuk dataframe.

.unique() digunakan menghasilkan nilai unik dari suatu kolom, hasilnya dalam bentuk numpy array. Attribute ini hanya digunakan pada series saja.

.index digunakan untuk mencari index/key dari Series atau Dataframe.

.columns digunakan untuk mengetahui apa saja kolom yang tersedia di dataframe tersebut (hanya digunakan untuk dataframe saja). 

#Penggunaan .loc dan .iloc
import pandas as pd

# Membuat DataFrame
data = {'kolomA': [1, 2, 3],
        'kolomB': [4, 5, 6],
        'kolomC': [7, 8, 9]}
df = pd.DataFrame(data, index=['baris1', 'baris2', 'baris3'])

# Menggunakan loc
print("Menggunakan loc:")
print(df.loc['baris2', 'kolomA'])  # Akses satu nilai
print(df.loc[['baris1', 'baris3'], ['kolomB', 'kolomC']])  # Akses beberapa baris dan kolom
print(df.loc['baris1':'baris2', 'kolomA':'kolomC'])  # Akses rentang baris dan kolom

# Menggunakan iloc
print("\nMenggunakan iloc:")
print(df.iloc[1, 0])  # Akses satu nilai (indeks 1 baris, 0 kolom)
print(df.iloc[[0, 2], [1, 2]])  # Akses beberapa baris dan kolom
print(df.iloc[0:2, 0:3])  # Akses rentang baris dan kolom

import pandas as pd
# Creating series from list
ex_list = ['a',1,3,5,'c','d']
ex_series = pd.Series(ex_list)
print(ex_series)
# Creating dataframe from list of list
ex_list_of_list = [[1,'a','b','c'],
                   [2.5,'d','e','f'],
		           [5, 'g','h','i'],
		           [7.5,'j',10.5,'l']]
index = ['dq','lab','kar','lan']
cols = ['float','char','obj','char']
ex_df = pd.DataFrame(ex_list_of_list, index=index, columns=cols)
print(ex_df)

In [1]: import pandas as pd
        # Creating series from dictionary
        dict_series = {'1':'a',
        			   '2':'b',
        			   '3':'c'}
        ex_series = pd.Series(dict_series)
        print(ex_series)
        # Creating dataframe from dictionary
        df_series = {1:['a','b','c'],
                     2:['b','c','d'],
                     4:[2,3,'z']}
        ex_df = pd.DataFrame(df_series)
        print(ex_df)

1    a
2    b
3    c
dtype: object
   1  2  4
0  a  b  2
1  b  c  3
2  c  d  z

In [1]: import pandas as pd
        import numpy as np
        # Creating series from numpy array (1D)
        arr_series = np.array([1,2,3,4,5,6,6,7])
        ex_series = pd.Series(arr_series)
        print(ex_series)
        # Creating dataframe from numpy array (2D)
        arr_df = np.array([[1,2,3,5],
                           [5,6,7,8],
                           ['a','b','c',10]])
        ex_df = pd.DataFrame(arr_df)
        print(ex_df)

0    1
1    2
2    3
3    4
4    5
5    6
6    6
7    7
dtype: int64
   0  1  2   3
0  1  2  3   5
1  5  6  7   8
2  a  b  c  10
 

### DATASET I/O

import pandas as pd
# File CSV
df_csv = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
print(df_csv.head(3)) # Menampilkan 3 data teratas

# File TSV
df_tsv = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep='\t')
print(df_tsv.head(3)) # Menampilkan 3 data teratas

# File xlsx dengan data di sheet "test"
df_excel = pd.read_excel("https://storage.googleapis.com/dqlab-dataset/sample_excel.xlsx", sheet_name="test")
print(df_excel.head(4)) # Menampilkan 4 data teratas

# File JSON
url ="https://storage.googleapis.com/dqlab-dataset/covid2019-api-herokuapp-v2.json"
df_json = pd.read_json(url)
print(df_json.head(10)) # Menampilkan 10 data teratas


###Indexing

##
import pandas as pd
        # Baca file TSV sample_tsv.tsv
        df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t" )
        # Index dari df
        print("Index:", df.index)
        # Column dari df
        print("Columns:", df.columns)

Index: RangeIndex(start=0, stop=101, step=1)
Columns: Index(['order_id', 'order_date', 'customer_id', 'city', 'province',
       'product_id', 'brand', 'quantity', 'item_price'],
      dtype='object')

## Multi index
import pandas as pd
# Baca file TSV sample_tsv.tsv
df = pd.read_csv( "https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t")
# Set multi index df
df_x = df.set_index(["order_date", "city", "customer_id"])
# Print nama dan level dari multi index
for name, level in zip(df_x.index.names, df_x.index.levels):
        print(name,':',level)

order_date : Index(['2019-01-01'], dtype='object', name='order_date')
city : Index(['Bogor', 'Jakarta Pusat', 'Jakarta Selatan', 'Jakarta Utara',
       'Makassar', 'Malang', 'Surabaya', 'Tangerang'],
      dtype='object', name='city')
customer_id : Int64Index([12681, 13963, 15649, 17091, 17228, 17450, 17470, 17511, 17616,
            18055],
           dtype='int64', name='customer_id')

##
import pandas as pd
# Baca file sample_tsv.tsv untuk 10 baris pertama saja
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t", nrows=10)
# Cetak data frame awal
print("Dataframe awal:\n", df)
# Set index baru
df.index = ["Pesanan ke-" + str(i) for i in range(1, 11)]
# Cetak data frame dengan index baru
print("Dataframe dengan index baru:\n", df)

Dataframe awal:
    order_id  order_date  customer_id  ...    brand quantity item_price
0   1612339  2019-01-01        18055  ...  BRAND_C        4    1934000
1   1612339  2019-01-01        18055  ...  BRAND_V        8     604000
2   1612339  2019-01-01        18055  ...  BRAND_G       12     747000
3   1612339  2019-01-01        18055  ...  BRAND_B       12     450000
4   1612339  2019-01-01        18055  ...  BRAND_G        3    1500000
5   1612339  2019-01-01        18055  ...  BRAND_V        3    2095000
6   1612339  2019-01-01        18055  ...  BRAND_H        3    2095000
7   1612339  2019-01-01        18055  ...  BRAND_S        3    1745000
8   1612339  2019-01-01        18055  ...  BRAND_F        6    1045000
9   1612339  2019-01-01        18055  ...  BRAND_P        6    1045000

[10 rows x 9 columns]
Dataframe dengan index baru:
                order_id  order_date  customer_id  ...    brand quantity item_price
Pesanan ke-1    1612339  2019-01-01        18055  ...  BRAND_C        4    1934000
Pesanan ke-2    1612339  2019-01-01        18055  ...  BRAND_V        8     604000
Pesanan ke-3    1612339  2019-01-01        18055  ...  BRAND_G       12     747000
Pesanan ke-4    1612339  2019-01-01        18055  ...  BRAND_B       12     450000
Pesanan ke-5    1612339  2019-01-01        18055  ...  BRAND_G        3    1500000
Pesanan ke-6    1612339  2019-01-01        18055  ...  BRAND_V        3    2095000
Pesanan ke-7    1612339  2019-01-01        18055  ...  BRAND_H        3    2095000
Pesanan ke-8    1612339  2019-01-01        18055  ...  BRAND_S        3    1745000
Pesanan ke-9    1612339  2019-01-01        18055  ...  BRAND_F        6    1045000
Pesanan ke-10   1612339  2019-01-01        18055  ...  BRAND_P        6    1045000

[10 rows x 9 columns]


##
import pandas as pd
# Baca file sample_tsv.tsv dan set lah index_col sesuai instruksi
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t", index_col=["order_date", "order_id"])
# Cetak data frame untuk 8 data teratas
print("Dataframe:\n", df.head(8))

Dataframe:
                      customer_id             city  ... quantity item_price
order_date order_id                                ...                    
2019-01-01 1612339         18055  Jakarta Selatan  ...        4    1934000
           1612339         18055  Jakarta Selatan  ...        8     604000
           1612339         18055  Jakarta Selatan  ...       12     747000
           1612339         18055  Jakarta Selatan  ...       12     450000
           1612339         18055  Jakarta Selatan  ...        3    1500000
           1612339         18055  Jakarta Selatan  ...        3    2095000
           1612339         18055  Jakarta Selatan  ...        3    2095000
           1612339         18055  Jakarta Selatan  ...        3    1745000

[8 rows x 7 columns]


###SLicing
slicing adalah cara untuk melakukan filter ke dataframe/series berdasarkan kriteria tertentu dari nilai kolomnya ataupun kriteria index-nya.
dengan 2 cara pake loc atau iloc

bahasa bayi nya slicing itu berati ambil beberapa data atau filter lah

import pandas as pd
# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
# Set index dari df sesuai instruksi
df = df.set_index(["order_date", "order_id", "product_id"])
# Slice sesuai intruksi
df_slice = df.loc[("2019-01-01",1612339,["P2154","P2159"]),:]
print("Slice df:\n", df_slice)

Slice df:
                                 customer_id  ... item_price
order_date order_id product_id               ...           
2019-01-01 1612339  P2154             18055  ...    1745000
                    P2159             18055  ...     310000

[2 rows x 6 columns]

##Transform
Transform adalah ketika mengubah dataset yang ada menjadi entitas baru, dapat dilakukan dengan:
- konversi dari satu data type ke data type yang lain,
- transpose dataframe,
- atau yang lainnya.
Hal yang biasa dilakukan pertama kali setelah data dibaca adalah mengecek tipe data di setiap kolomnya apakah sesuai dengan representasinya.

##
import pandas as pd
# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
# Tampilkan tipe data
print("Tipe data df:\n", df.dtypes)
# Ubah tipe data kolom order_date menjadi datetime
df["order_date"] = pd.to_datetime(df["order_date"])
# Tampilkan tipe data df setelah transformasi
print("\nTipe data df setelah transformasi:\n", df.dtypes)

Tipe data df:
 order_id        int64
order_date     object
customer_id     int64
city           object
province       object
product_id     object
brand          object
quantity        int64
item_price      int64
dtype: object

Tipe data df setelah transformasi:
 order_id                int64
order_date     datetime64[ns]
customer_id             int64
city                   object
province               object
product_id             object
brand                  object
quantity                int64
item_price              int64
dtype: object

##
import pandas as pd
# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
# Tampilkan tipe data
print("Tipe data df:\n", df.dtypes)
# Ubah tipe data kolom quantity menjadi tipe data numerik float
df["quantity"] = pd.to_numeric(df["quantity"], downcast="float")
# Ubah tipe data kolom city menjadi tipe data category
df["city"] = df["city"].astype("category")
# Tampilkan tipe data df setelah transformasi
print("\nTipe data df setelah transformasi:\n", df.dtypes)

Tipe data df:
 order_id        int64
order_date     object
customer_id     int64
city           object
province       object
product_id     object
brand          object
quantity        int64
item_price      int64
dtype: object

Tipe data df setelah transformasi:
 order_id          int64
order_date       object
customer_id       int64
city           category
province         object
product_id       object
brand            object
quantity        float32
item_price        int64
dtype: object

##
import pandas as pd
# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
# Cetak 5 baris teratas kolom brand
print("Kolom brand awal:\n", df["brand"].head())
# Gunakan method apply untuk merubah isi kolom menjadi lower case
df["brand"] = df["brand"].apply(lambda x: x.lower())
# Cetak 5 baris teratas kolom brand
print("Kolom brand setelah apply:\n", df["brand"].head())
# Gunakan method map untuk mengambil kode brand yaitu karakter terakhirnya
df["brand"] = df["brand"].map(lambda x: x[-1])
# Cetak 5 baris teratas kolom brand
print("Kolom brand setelah map:\n", df["brand"].head())

Kolom brand awal:
 0    BRAND_C
1    BRAND_V
2    BRAND_G
3    BRAND_B
4    BRAND_G
Name: brand, dtype: object
Kolom brand setelah apply:
 0    brand_c
1    brand_v
2    brand_g
3    brand_b
4    brand_g
Name: brand, dtype: object
Kolom brand setelah map:
 0    c
1    v
2    g
3    b
4    g
Name: brand, dtype: object
